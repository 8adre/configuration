# This playbook will check for migrations that need to be run for Django applications within a larger
# Django application. If migrations exist, it will run the migrations while saving the output as an artifact.
#
# The playbook uses the Django management commands found in this Django app repo:
# https://github.com/edx/edx-django-release-util
# So the Django app above needs to be installed in the Django app being checked for migrations.
#
# Required variables for this playbook:
#
#   - application_path                - the path where the Django application with potential migrations is installed
#                                       NOTE: It is assumed that edx-django-release-util is one of its INSTALLED_APPS.
#   - unapplied_migrations_output     - the filename where the unapplied migration YAML output is stored
#   - migration_output                - the filename where the migration output is saved
#   - artifact_path                   - the path where the migration artifacts should be copied after completion
#   - hipchat_token                   - API token to send messages to hipchat
#   - hipchat_room                    - ID or name of the room to send the notification
#   - hipchat_url                     - URL of the hipchat API  (defaults to v1 of the api)
#
# Example command line to run this playbook:
#    ansible-playbook -vvvv -i "localhost," -c local \
#       -e @overrides.yml \
#       run_migrations.yml
#


- hosts: all
  vars:
    application_path: /usr/src/my_django_app
    unapplied_migrations_output: unapplied_migrations.yml
    migration_output: migration_output.yml
    hipchat_url: https://api.hipchat.com/v2/
  gather_facts: False
  connection: local
  tasks:

  - name: Create a temporary directory for the migration output.
    command: mktemp -d
    register: temp_output_dir

  - name: generate list of unapplied migrations
    command: python manage.py show_unapplied_migrations --output_file "{{ temp_output_dir.stdout }}/{{ unapplied_migrations_output }}"
    args:
      chdir: "{{ application_path }}"

  - name: migrate to apply any unapplied migrations
    command: python manage.py run_migrations "{{ temp_output_dir.stdout }}/{{ unapplied_migrations_output }}" --output_file "{{ temp_output_dir.stdout }}/{{ migration_output }}"
    args:
      chdir: "{{ application_path }}"

  - name: Transfer artifacts to the proper place.
    copy:
      src: "{{ temp_output_dir.stdout }}/"
      dest: "{{ artifact_path }}"
      mode: 0700

  - name: Send Hipchat notification cleanup has finished
    hipchat_2_0_0_1:
      api: "{{ hipchat_url }}"
      token: "{{ hipchat_token }}"
      room: "{{ hipchat_room }}"
      msg: "Migrations have completed."
    ignore_errors: yes
    when: hipchat_token is defined
